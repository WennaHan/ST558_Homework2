---
title: "Programming in Base R"
format: html
editor: visual
---

## Task 1: Basic Vector practice

Suppose we have data from a medical experiment on blood pressure. We have the following pre-treatment values for subjects 1 through 20: 130, 128, 116, 124, 133, 134, 118, 126, 114, 127, 141, 138, 128, 140, 137, 131, 120, 128, 139, 135. After treatment, the subjects were measured again (subjects 1 through 20 match): 114, 98, 113, 99, 107, 116, 113, 111, 119, 117, 101, 119, 130, 122, 106, 106, 124, 102, 117, 113.

### 1. Create two vectors. One vector corresponding to the pre measurements and one to the post measurements.

```{r}
pre_measure <- c (130, 128, 116, 124, 133, 134, 118, 126, 114, 127, 141, 138, 128, 140, 137, 131, 120, 128, 139, 135)
post_measure <- c (114, 98, 113, 99, 107, 116, 113, 111, 119, 117, 101, 119, 130, 122, 106, 106, 124, 102, 117, 113)
```

### 2. Assign names to the vector elements using the paste() function. Note that names() can be overwritten by a character vector.

```{r}
No.subject <- paste("Subject", 1:20, sep = "_")
names(pre_measure) <- names(post_measure) <- No.subject
pre_measure
post_measure
```

### 3. Calculate the change in blood pressure for each patient by subtracting post-treatment measurements from pre-treatment measurements. Recall that R does math elementwise! Save this calculation as a new object in R (also a vector).

```{r}
bp_change <- pre_measure - post_measure
bp_change
```

### 4. Calculate the average decrease in blood pressure across all patients.

```{r}
mean(bp_change)
```

### 5. Determine which patients experienced a decrease in blood pressure after treatment (a positive change). Use the which() function to just return the indices (and names) associated with this type of change.

```{r}
which (bp_change > 0)
```

### 6. Subset the vector of differences to only return those that have a positive change.

```{r}
positive_bp_change <- bp_change [bp_change > 0]
positive_bp_change
```

### 7. Calculate the average decrease in blood pressure for those where the blood pressure decreased (positive change).

```{r}
mean(positive_bp_change)
```

## Task 2: Basic Data Frame practice

### 1. Create a data frame object with four columns corresponding to your data above: patient, pre_bp, post_bp, and diff_bp

```{r}
bp_data <- data.frame(patient = No.subject, pre_bp = pre_measure, post_bp = post_measure, diff_bp = bp_change, row.names = NULL)
bp_data
```

### 2. Return only rows where the diff_bp column is negative.

```{r}
negative_bp_diff <- bp_data [bp_data$diff_bp<0,]
negative_bp_diff
```

### 3. Add a new column to the data frame corresponding to TRUE if the post_bp is less than 120.

```{r}
bp_data$post_less_120 <- (bp_data$post_bp < 120)
bp_data
```

### 4. Finally, print the data frame out nicely in your final document by modifying the code below appropriately.

```{r}
knitr::kable(bp_data)
```

## Task 3: List practice

Continue the previous example. Suppose we now also have data from another experiment where the ‘treatment’ was actually a placebo. We have the following pre-treatment values for subjects 1 through 10 (different set of subjects): • 138, 135, 147, 117, 152, 134, 114, 121, 131, 130 after treatment, the subjects were measured again (subjects 1 through 10 match) • 105, 136, 123, 130, 134, 143, 135, 139, 120, 124.

### 1. Create a new data frame with this data in it that is similar to the data frame from task 2 (including the new column).

```{r}
placebo_pre_measure <- c (138, 135, 147, 117, 152, 134, 114, 121, 131, 130)
placebo_post_measure <- c (105, 136, 123, 130, 134, 143, 135, 139, 120, 124)
name <- paste("Subject", 1:10, sep = "_")
placebo_bp_data <- data.frame (patient = name, 
                               pre_bp = placebo_pre_measure, 
                               post_bp = placebo_post_measure, 
                               diff_bp = placebo_pre_measure-placebo_post_measure,
                               post_less_120 = (placebo_post_measure<120))
placebo_bp_data
```

### 2. Now create and store a list with two elements:

-   1st element named treatment and contains the first data frame you created.
-   2nd element named placebo and contains the second data frame you created.

```{r}
bp_list <- list(treatment = bp_data, placebo = placebo_bp_data)
bp_list
```

### 3. Access the first list element using three different types of syntax.

```{r}
bp_list[1]
bp_list[[1]]
bp_list$treatment
```

### 4. In one line, access the placebo data frame, pre_bp column.

```{r}
bp_list$placebo$pre_bp
```

## Task 4: Control Flow Practice

Continue the previous example.

### 1. Suppose we want to characterize the post-treatment (or placebo) blood pressure measurement as optimal (≤ 120), borderline (120 \< bp ≤ 130), and high (\> 130). First, create a new column in each data frame from above called status.

```{r}
bp_list$treatment$status <- character(20)
bp_list$placebo$status <- character(10)
```

### 2. For the non-placebo data frame (within the list), create a for loop and use if/then/else logic to create the status column’s values.

```{r}
for(i in 1:20){
  if (bp_list$treatment[i,3]>130){
    bp_list$treatment[i,6] = "high"
  }else if (bp_list$treatment[i,3]>120){
    bp_list$treatment[i,6] = "border line"
  }else{
    bp_list$treatment[i,6] = "optimal"
  }
}
bp_list$treatment
```

### 3. Repeat for the placebo data frame (within the list).

```{r}
for(i in 1:10){
  if (bp_list$placebo[i,3]>130){
    bp_list$placebo[i,6] = "high"
  }else if (bp_list$placebo[i,3]>120){
    bp_list$placebo[i,6] = "border line"
  }else{
    bp_list$placebo[i,6] = "optimal"
  }
}
bp_list$placebo
```

## Task 5: Function Writing

Continue the previous example. Suppose you would eventually have many datasets in the form of the two above. You want to write a function to do some things for you quickly.

### 1. Write a function that

-   takes in a list with two data frames in it (a treatment and a placebo data frame) as an argument. Give no default value.
-   takes in an R function (that would find a summary of a numeric column) with the default value being set to "mean" (notice this is a quoted string).
-   Finds the statistic of interest (as defined by the user input) for the pre, post, and diff columns of both data frames.
-   These six values should then be returned as a named list with meaningful names.

```{r}
sum_fun <- function (data_list, stat = "mean"){
  my_fun <- get(stat)
  sum_treatment <- c(my_fun(data_list$treatment$pre_bp),
                        my_fun(data_list$treatment$post_bp),
                        my_fun(data_list$treatment$diff_bp))
  sum_placebo <- c(my_fun(data_list$placebo$pre_bp),
                      my_fun(data_list$placebo$post_bp),
                      my_fun(data_list$placebo$diff_bp))
  names(sum_treatment) <- paste(stat, "treatment", c("pre","post","diff"),
                                sep = "_")
  names(sum_placebo) <- paste(stat, "placebo", c("pre", "post","diff"),
                              sep = "_")
  sum <- list(sum_treatment = sum_treatment, sum_placebo = sum_placebo)
  names(sum) <- c(paste(stat, "treatment", sep = "_"), 
                  paste(stat, "placebo", sep = "_"))
  sum
}
```

-   Finally, apply your function to you list of data frames from previous. Use it without specifying your statistic, with specifying your statistic as "var", "sd", "min", and "max".

```{r}
sum_fun(bp_list)
sum_fun(bp_list, "var")
sum_fun(bp_list, "sd")
sum_fun(bp_list, "min")
sum_fun(bp_list, "max")
```
